<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/Public/ebayProject/database.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1950"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,5:mainusers"/><default_encoding codec=""/><browse_table_settings/></tab_browse><tab_sql><sql name="SQL 1">CREATE TABLE users (
    userId INT AUTO_INCREMENT PRIMARY KEY,
    userPassword VARCHAR(20),
    userEmail VARCHAR(50), -- Assuming the maximum length of an email address
    userName VARCHAR(50), -- Assuming the maximum length of a user's name
    userContact VARCHAR(20) -- Assuming the maximum length of a contact number
);
CREATE TABLE admins (
    adminId INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE,
    password VARCHAR(255), -- Passwords should be hashed and stored securely
    fullName VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    role VARCHAR(50)
);



CREATE TABLE addresses (
    userAddressId INT AUTO_INCREMENT PRIMARY KEY,
    userContact VARCHAR(20),
    userCountry VARCHAR(20),
    userCity VARCHAR(20),
    userStreet VARCHAR(100),
    userZipCode INT
);

CREATE TABLE userHasAddress (
    userId INT,
    addressId INT,
    PRIMARY KEY (userId, addressId),
    FOREIGN KEY (userId) REFERENCES users(userId),
    FOREIGN KEY (addressId) REFERENCES addresses(userAddressId)
);

CREATE TABLE payments (
    cardNumber INT PRIMARY KEY,
    cardType VARCHAR(20),
    cardHolderName VARCHAR(50), -- Assuming a reasonable maximum length for a card holder's name
    cardCvv INT,
    expiryDate DATE
);

CREATE TABLE userHasPayment (
    userID INT,
    cardNumber INT,
    PRIMARY KEY (userID, cardNumber),
    FOREIGN KEY (userID) REFERENCES users(userId),
    FOREIGN KEY (cardNumber) REFERENCES payments(cardNumber)
);

CREATE TABLE messages (
    messageId INT AUTO_INCREMENT PRIMARY KEY,
    messageText TEXT,
    messageTime TIME,
    messageDate DATE
);


CREATE TABLE userHasMessages (
    userId INT,
    messageId INT,
    PRIMARY KEY (userId, messageId),
    FOREIGN KEY (userId) REFERENCES users(userId),
    FOREIGN KEY (messageId) REFERENCES messages(messageId)
);
CREATE TABLE product (
    productId INT AUTO_INCREMENT PRIMARY KEY,
    productName VARCHAR(50), -- Assuming a reasonable maximum length for a product name
    productCondition VARCHAR(50), -- Assuming a reasonable maximum length for a product condition
    productDescription TEXT
);

CREATE TABLE category (
    categoryId INTEGER PRIMARY KEY AUTOINCREMENT,
    categoryName VARCHAR(50) -- Assuming a reasonable maximum length for a category name
);
CREATE TABLE categoryHasProducts (
    categoryId INT,
    productId INT,
    PRIMARY KEY (categoryId, productId),
    FOREIGN KEY (categoryId) REFERENCES category(categoryId),
    FOREIGN KEY (productId) REFERENCES product(productId)
);

CREATE TABLE productImages (
    productId INT,
    imagePath VARCHAR(50),
    PRIMARY KEY (productId, imagePath),
    FOREIGN KEY (productId) REFERENCES product(productId)
);
CREATE TABLE reviews (
    reviewId INT AUTO_INCREMENT PRIMARY KEY,
    reviewText TEXT
);

CREATE TABLE reviewHasImages (
    reviewId INT,
    imagePath VARCHAR(50),
    PRIMARY KEY (reviewId, imagePath),
    FOREIGN KEY (reviewId) REFERENCES reviews(reviewId)
);
CREATE TABLE productHasReviews (
    productId INT,
    reviewId INT,
    PRIMARY KEY (productId, reviewId),
    FOREIGN KEY (productId) REFERENCES product(productId),
    FOREIGN KEY (reviewId) REFERENCES reviews(reviewId)
);

CREATE TABLE listings (
--one user can have multiple multiple products listed  

  userId INT,
    productId INT,
    PRIMARY KEY (userId, productId),
    FOREIGN KEY (userId) REFERENCES users(userId),
    FOREIGN KEY (productId) REFERENCES product(productId)
);
CREATE TABLE wishlist (
    wishListId INT AUTO_INCREMENT,
    userId INT,
    PRIMARY KEY (wishListId),
    FOREIGN KEY (userId) REFERENCES users(userId)
);
CREATE TABLE wishListHasProducts (
    wishListId INT,
    productId INT,
    PRIMARY KEY (wishListId, productId),
    FOREIGN KEY (wishListId) REFERENCES wishlist(wishListId),
    FOREIGN KEY (productId) REFERENCES product(productId)
);
CREATE TABLE cart (
    cartId INTEGER PRIMARY KEY AUTOINCREMENT,
    userId INT,
    FOREIGN KEY (userId) REFERENCES users(userId)
);
CREATE TABLE cartHasProducts (
    cartId INT,
    productId INT,
    PRIMARY KEY (cartId, productId),
    FOREIGN KEY (cartId) REFERENCES cart(cartId),
    FOREIGN KEY (productId) REFERENCES product(productId)
);

CREATE TABLE orders (
    orderId INTEGER PRIMARY KEY AUTOINCREMENT,
    orderDate DATE,
    shippingCost INT,
    shippingAddressId INT,
    FOREIGN KEY (shippingAddressId) REFERENCES addresses(addressId)
);
CREATE TABLE orderHasProducts (
    orderId INT,
    productId INT,
    PRIMARY KEY (orderId, productId),
    FOREIGN KEY (orderId) REFERENCES orders(orderId),
    FOREIGN KEY (productId) REFERENCES product(productId)
);
CREATE TABLE orderHasBuyerSeller (
    orderId INT,
    buyerId INT,
    sellerId INT,
    FOREIGN KEY (orderId) REFERENCES orders(orderId),
    FOREIGN KEY (buyerId) REFERENCES users(userId),
    FOREIGN KEY (sellerId) REFERENCES users(userId)
);
CREATE TABLE ordersStatus (
    orderId INT,
    status VARCHAR(10),
    PRIMARY KEY (orderId),
    FOREIGN KEY (orderId) REFERENCES orders(orderId)
);
</sql><current_tab id="0"/></tab_sql></sqlb_project>
